// tslint:disable
// eslint-disable
/**
 * PaulExpress API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  FilterCriteriaInfo,
  FilterCriteriaInfoFromJSON,
  FilterCriteriaInfoToJSON,
  OrderDetailDto,
  OrderDetailDtoFromJSON,
  OrderDetailDtoToJSON,
  OrderDto,
  OrderDtoFromJSON,
  OrderDtoToJSON,
  OrderGridDtoPaginatedResults,
  OrderGridDtoPaginatedResultsFromJSON,
  OrderGridDtoPaginatedResultsToJSON,
  OrderSearch,
  OrderSearchFromJSON,
  OrderSearchToJSON,
  SelectItem,
  SelectItemFromJSON,
  SelectItemToJSON
} from "../models";

export interface OrderApiApiOrderCriteriaListSearchFieldGetRequest {
  searchField: string;
}

export interface OrderApiApiOrderCriteriasGetRequest {
  includeListsValues?: boolean;
}

export interface OrderApiApiOrderDeleteOrderIdGetRequest {
  orderId: number;
}

export interface OrderApiApiOrderOrderIdGetRequest {
  orderId: number;
}

export interface OrderApiApiOrderSavePostRequest {
  OrderDto?: OrderDto;
}

export interface OrderApiApiOrderSearchPostRequest {
  OrderSearch?: OrderSearch;
}

/**
 * no description
 */
export class OrderApi extends runtime.BaseAPI {
  /**
   */
  async apiOrderCriteriaListSearchFieldGetRaw(
    requestParameters: OrderApiApiOrderCriteriaListSearchFieldGetRequest
  ): Promise<runtime.ApiResponse<Array<SelectItem>>> {
    if (requestParameters.searchField === null || requestParameters.searchField === undefined) {
      throw new runtime.RequiredError(
        "searchField",
        "Required parameter requestParameters.searchField was null or undefined when calling apiOrderCriteriaListSearchFieldGet."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Order/criteriaList/{searchField}`.replace(
        `{${"searchField"}}`,
        encodeURIComponent(String(requestParameters.searchField))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(SelectItemFromJSON));
  }

  /**
   */
  async apiOrderCriteriaListSearchFieldGet(
    requestParameters: OrderApiApiOrderCriteriaListSearchFieldGetRequest
  ): Promise<Array<SelectItem>> {
    const response = await this.apiOrderCriteriaListSearchFieldGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiOrderCriteriasGetRaw(
    requestParameters: OrderApiApiOrderCriteriasGetRequest
  ): Promise<runtime.ApiResponse<Array<FilterCriteriaInfo>>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.includeListsValues !== undefined) {
      queryParameters["includeListsValues"] = requestParameters.includeListsValues;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Order/criterias`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(FilterCriteriaInfoFromJSON));
  }

  /**
   */
  async apiOrderCriteriasGet(
    requestParameters: OrderApiApiOrderCriteriasGetRequest
  ): Promise<Array<FilterCriteriaInfo>> {
    const response = await this.apiOrderCriteriasGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiOrderDeleteOrderIdGetRaw(
    requestParameters: OrderApiApiOrderDeleteOrderIdGetRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
      throw new runtime.RequiredError(
        "orderId",
        "Required parameter requestParameters.orderId was null or undefined when calling apiOrderDeleteOrderIdGet."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Order/Delete/{orderId}`.replace(
        `{${"orderId"}}`,
        encodeURIComponent(String(requestParameters.orderId))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiOrderDeleteOrderIdGet(requestParameters: OrderApiApiOrderDeleteOrderIdGetRequest): Promise<void> {
    await this.apiOrderDeleteOrderIdGetRaw(requestParameters);
  }

  /**
   */
  async apiOrderOrderIdGetRaw(
    requestParameters: OrderApiApiOrderOrderIdGetRequest
  ): Promise<runtime.ApiResponse<OrderDetailDto>> {
    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
      throw new runtime.RequiredError(
        "orderId",
        "Required parameter requestParameters.orderId was null or undefined when calling apiOrderOrderIdGet."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue => OrderDetailDtoFromJSON(jsonValue));
  }

  /**
   */
  async apiOrderOrderIdGet(requestParameters: OrderApiApiOrderOrderIdGetRequest): Promise<OrderDetailDto> {
    const response = await this.apiOrderOrderIdGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiOrderSavePostRaw(
    requestParameters: OrderApiApiOrderSavePostRequest
  ): Promise<runtime.ApiResponse<OrderDto>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Order/save`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: OrderDtoToJSON(requestParameters.OrderDto)
    });

    return new runtime.JSONApiResponse(response, jsonValue => OrderDtoFromJSON(jsonValue));
  }

  /**
   */
  async apiOrderSavePost(requestParameters: OrderApiApiOrderSavePostRequest): Promise<OrderDto> {
    const response = await this.apiOrderSavePostRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async apiOrderSearchPostRaw(
    requestParameters: OrderApiApiOrderSearchPostRequest
  ): Promise<runtime.ApiResponse<OrderGridDtoPaginatedResults>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request({
      path: `/api/Order/search`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: OrderSearchToJSON(requestParameters.OrderSearch)
    });

    return new runtime.JSONApiResponse(response, jsonValue => OrderGridDtoPaginatedResultsFromJSON(jsonValue));
  }

  /**
   */
  async apiOrderSearchPost(
    requestParameters: OrderApiApiOrderSearchPostRequest
  ): Promise<OrderGridDtoPaginatedResults> {
    const response = await this.apiOrderSearchPostRaw(requestParameters);
    return await response.value();
  }
}
