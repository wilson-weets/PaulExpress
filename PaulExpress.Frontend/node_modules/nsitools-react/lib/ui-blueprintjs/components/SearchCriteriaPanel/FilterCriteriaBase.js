var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import * as React from "react";
import { FormGroup, HTMLSelect, InputGroup, Switch, NumericInput, Button, Intent, Classes, Tooltip, Position } from "@blueprintjs/core";
import styled from "styled-components";
import { IconNames } from "@blueprintjs/icons";
import moment from "moment";
import { DateInput, DateRangeInput } from "@blueprintjs/datetime";
import { FilterCriteriaInfoTypeEnum } from "./types";
import { useTranslation } from "react-i18next";
var MyHTMLSelect = styled(HTMLSelect)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  min-width: 150px;\n  margin-right: 1em;\n"], ["\n  min-width: 150px;\n  margin-right: 1em;\n"])));
var InputsContainer = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: row;\n  & .criteriaInput {\n    & .", ", .", ", select {\n      min-width: 500px;\n    }\n  }\n  & .criteriaInputBetween {\n    & .", ", .", ", select {\n      min-width: 250px;\n    }\n  }\n"], ["\n  display: flex;\n  flex-direction: row;\n  & .criteriaInput {\n    & .", ", .", ", select {\n      min-width: 500px;\n    }\n  }\n  & .criteriaInputBetween {\n    & .", ", .", ", select {\n      min-width: 250px;\n    }\n  }\n"])), Classes.INPUT_GROUP, Classes.INPUT, Classes.INPUT_GROUP, Classes.INPUT);
var RemoveButton = styled(Button)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  margin-left: 1em;\n"], ["\n  margin-left: 1em;\n"])));
export var FilterCriteriaBase = function (_a) {
    var criteria = _a.criteria, value = _a.value, onValueChange = _a.onValueChange, onRemove = _a.onRemove, tlDataPrefix = _a.tlDataPrefix, overrideListValue = _a.overrideListValue;
    var t = useTranslation().t;
    return (React.createElement("div", null,
        React.createElement(FormGroup, { label: t("" + (tlDataPrefix ? tlDataPrefix + "_" : "") + criteria.criteria) + " : ", inline: true },
            React.createElement(InputsContainer, null,
                criteria.type !== FilterCriteriaInfoTypeEnum.Boolean && (React.createElement(MyHTMLSelect, { name: "SearchMode", value: value.searchMode, onChange: function (e) {
                        var v = e.target.value;
                        onValueChange(__assign(__assign({}, value), { searchMode: v }));
                    } }, criteria.searchModes.map(function (m) { return (React.createElement("option", { key: m, value: m }, t("SearchCriteriaPanel_SearchModes_" + m))); }))),
                renderInput(criteria, value, onValueChange, t, tlDataPrefix, overrideListValue),
                React.createElement(Tooltip, { content: t("SearchCriteriaPanel_RemoveCriteria"), position: Position.RIGHT, usePortal: false },
                    React.createElement(RemoveButton, { icon: IconNames.DELETE, minimal: true, onClick: function () { return onRemove(criteria.criteria); } }))))));
};
function renderInput(criteria, values, setValue, tUnsafe, tlDataPrefix, overrideListValue) {
    switch (criteria.type) {
        case FilterCriteriaInfoTypeEnum.Text:
            return (React.createElement(InputGroup, { name: "Value", className: "criteriaInput", value: values.value, onChange: function (e) {
                    setValue(__assign(__assign({}, values), { value: e.target.value }));
                }, rightElement: React.createElement(Button, { icon: IconNames.ERASER, intent: Intent.DANGER, minimal: true, onClick: function () { return setValue(__assign(__assign({}, values), { value: "" })); } }) }));
        case FilterCriteriaInfoTypeEnum.Boolean:
            return (React.createElement(Switch, { name: "Value", style: { marginTop: "5px" }, checked: values.value, onChange: function (e) {
                    setValue(__assign(__assign({}, values), { value: e.target.checked }));
                }, large: true }));
        case FilterCriteriaInfoTypeEnum.Numeric:
        case FilterCriteriaInfoTypeEnum.Float:
            return (React.createElement(NumericInput, { name: "Value", className: "criteriaInput", value: values.value, onValueChange: function (e) {
                    console.log(e);
                    setValue(__assign(__assign({}, values), { value: +e }));
                }, allowNumericCharactersOnly: true, buttonPosition: "none", selectAllOnFocus: true, rightElement: React.createElement(Button, { icon: IconNames.ERASER, intent: Intent.DANGER, minimal: true, onClick: function () { return setValue(__assign(__assign({}, values), { value: "" })); } }) }));
        case FilterCriteriaInfoTypeEnum.List:
            return (React.createElement(HTMLSelect, { className: "criteriaInput", value: values.value, onChange: function (e) {
                    setValue(__assign(__assign({}, values), { value: +e.target.value }));
                }, name: "Value" }, criteria.listValues.map(function (i) { return (React.createElement("option", { key: i.idValue, value: i.idValue }, overrideListValue
                ? overrideListValue(i)
                : tUnsafe("" + (tlDataPrefix ? tlDataPrefix + "_" : "") + criteria.criteria + "_" + i.displayValue))); })));
        case FilterCriteriaInfoTypeEnum.Date:
            if (values.searchMode === "Between") {
                return (React.createElement(DateRangeInput, { className: "criteriaInputBetween", formatDate: function (date) { return date.toLocaleDateString(); }, shortcuts: false, minDate: moment()
                        .subtract(100, "year")
                        .toDate(), maxDate: moment()
                        .add(100, "year")
                        .toDate(), selectAllOnFocus: true, closeOnSelection: false, parseDate: function (str) { return new Date(str); }, value: [values.value, values.secondaryValue], onChange: function (_a) {
                        var _b = __read(_a, 2), startDate = _b[0], EndDate = _b[1];
                        setValue(__assign(__assign({}, values), { value: startDate, secondaryValue: EndDate }));
                    }, endInputProps: {
                        rightElement: (React.createElement(Button, { icon: IconNames.ERASER, intent: Intent.DANGER, minimal: true, onClick: function () { return setValue(__assign(__assign({}, values), { value: "" })); } }))
                    } }));
            }
            else {
                return (React.createElement(DateInput, { className: "criteriaInput", formatDate: function (date) { return date.toLocaleDateString(); }, parseDate: function (str) { return new Date(str); }, closeOnSelection: true, minDate: moment()
                        .subtract(100, "year")
                        .toDate(), maxDate: moment()
                        .add(100, "year")
                        .toDate(), value: values.value, onChange: function (date) {
                        return setValue(__assign(__assign({}, values), { value: date, secondaryValue: undefined }));
                    }, inputProps: {
                        rightElement: (React.createElement(Button, { icon: IconNames.ERASER, intent: Intent.DANGER, minimal: true, onClick: function () {
                                return setValue(__assign(__assign({}, values), { value: undefined, secondaryValue: undefined }));
                            } }))
                    } }));
            }
        default:
            return null;
    }
}
var templateObject_1, templateObject_2, templateObject_3;
