var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import * as React from "react";
import styled from "styled-components";
import { Button, Classes, HTMLSelect } from "@blueprintjs/core";
import { IconNames } from "@blueprintjs/icons";
var PaginatorContainer = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  margin: 0.5em;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n"], ["\n  margin: 0.5em;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n"])));
var HorizontalAlignDiv = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n"], ["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n"])));
export var PagerSelector = function (_a) {
    var tableState = _a.tableState;
    var pageSize = tableState.pageSize, availablePageSizes = tableState.availablePageSizes, pageNumbers = tableState.pageNumbers, canGoNextPage = tableState.canGoNextPage, canGoPreviousPage = tableState.canGoPreviousPage, goToNextPage = tableState.goToNextPage, goToPage = tableState.goToPage, goToPreviousPage = tableState.goToPreviousPage, setPageSize = tableState.setPageSize, pageNumber = tableState.pageNumber, nbPages = tableState.nbPages, totalCount = tableState.totalCount;
    return (React.createElement(PaginatorContainer, null,
        React.createElement(HorizontalAlignDiv, null, availablePageSizes.map(function (size) { return (React.createElement(Button, { style: { marginRight: "0.5em" }, minimal: true, className: pageSize === size ? Classes.ACTIVE : "", key: size, onClick: function () {
                setPageSize(size);
            }, text: size })); })),
        React.createElement(HorizontalAlignDiv, null,
            React.createElement("span", null,
                "Page ",
                pageNumber,
                " of ",
                nbPages,
                " (",
                totalCount,
                " items)"),
            React.createElement(Button, { style: { marginLeft: "0.5em" }, icon: IconNames.CHEVRON_LEFT, disabled: !canGoPreviousPage, onClick: goToPreviousPage, minimal: true }),
            React.createElement(HTMLSelect, { style: { marginLeft: "0.5em" }, value: pageNumber, onChange: function (e) { return goToPage(+e.target.value); }, minimal: true }, pageNumbers.map(function (e) { return (React.createElement("option", { key: e, value: e }, e)); })),
            React.createElement(Button, { style: { marginLeft: "1em" }, icon: IconNames.CHEVRON_RIGHT, disabled: !canGoNextPage, onClick: goToNextPage, minimal: true }))));
};
var templateObject_1, templateObject_2;
