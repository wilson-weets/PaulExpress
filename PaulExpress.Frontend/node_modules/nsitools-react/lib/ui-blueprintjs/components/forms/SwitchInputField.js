var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Switch } from "@blueprintjs/core";
import * as React from "react";
import { BaseFormGroup } from ".";
import { getIn } from "formik";
export var SwitchInputField = function (props) {
    var disabled = props.disabled, formGroupProps = __rest(props, ["disabled"]);
    return (React.createElement(BaseFormGroup, __assign({}, formGroupProps), function (_a) {
        var formikProps = _a.formikProps, name = _a.name;
        return (React.createElement(Switch, { name: name, checked: getIn(formikProps.values, name, ""), onChange: function (e) {
                formikProps.setFieldValue(name, e.currentTarget.checked);
            }, disabled: props.disabled }));
    }));
};
