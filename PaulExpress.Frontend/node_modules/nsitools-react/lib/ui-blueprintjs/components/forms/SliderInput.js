var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Slider } from "@blueprintjs/core";
import { getIn } from "formik";
import * as React from "react";
import { BaseFormGroup } from "./BaseFormGroup";
export var SliderInput = function (props) {
    var disabled = props.disabled, _a = props.stepSize, stepSize = _a === void 0 ? 1 : _a, min = props.min, max = props.max, _b = props.labelStepSize, labelStepSize = _b === void 0 ? 20 : _b, labelRenderer = props.labelRenderer, formGroupProps = __rest(props, ["disabled", "stepSize", "min", "max", "labelStepSize", "labelRenderer"]);
    return (React.createElement(BaseFormGroup, __assign({}, formGroupProps), function (_a) {
        var formikProps = _a.formikProps, name = _a.name;
        return (React.createElement(Slider, { className: name, value: getIn(formikProps.values, name, ""), disabled: disabled, stepSize: stepSize, min: min, max: max, labelStepSize: labelStepSize, labelRenderer: labelRenderer || true, onChange: function (value) {
                formikProps.setFieldValue(name, value);
            }, onRelease: function (value) {
                formikProps.setFieldValue(name, value);
            } }));
    }));
};
