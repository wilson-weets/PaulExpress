var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useEffect } from "react";
import { useApiEffect } from "./useApi";
import useDebounce from "./useDebounce";
export function useSearchApi(_a) {
    var tableState = _a.tableState, searchFunction = _a.searchFunction, overrideTableStateSearch = _a.overrideTableStateSearch, _b = _a.initialSearch, initialSearch = _b === void 0 ? true : _b;
    var _c = __read(React.useState(), 2), searchData = _c[0], setSearchData = _c[1];
    var sortKeysStrings = tableState.sortKeysStrings, globalFilter = tableState.globalFilter, skip = tableState.skip, take = tableState.take, setData = tableState.setData;
    var _d = __read(React.useState(false), 2), manualTriggered = _d[0], setManualTriggered = _d[1];
    var debouncedFilter = useDebounce(globalFilter, 500);
    useEffect(function () {
        setSearchData(function (s) {
            var nextSearch = __assign(__assign({}, s), { sortKey: sortKeysStrings, filter: debouncedFilter, forceSkip: skip, forceTake: take });
            return overrideTableStateSearch
                ? overrideTableStateSearch(nextSearch)
                : nextSearch;
        });
    }, [debouncedFilter, overrideTableStateSearch, skip, sortKeysStrings, take]);
    var innerSearch = React.useCallback(function (nextSearch) {
        setSearchData(function (s // MAGIK
        ) {
            return (__assign({ sortKey: s.sortKey, filter: s.filter, forceSkip: s.forceSkip, forceTake: s.forceTake }, nextSearch));
        });
    }, []);
    var _e = __read(useApiEffect(function () {
        if (!searchData)
            return { results: [] };
        else if (manualTriggered) {
            return searchFunction(searchData);
        }
    }, [searchData]), 2), gridResults = _e[0], loading = _e[1];
    useEffect(function () {
        if (gridResults) {
            var newData = {
                totalCount: gridResults.totalCount || 0
            };
            setData(gridResults.results, newData);
        }
    }, [gridResults, setData]);
    var search = React.useCallback(function (nextSearch) {
        setManualTriggered(true);
        innerSearch(nextSearch);
    }, [innerSearch]);
    useEffect(function () {
        if (initialSearch) {
            search();
        }
    }, [initialSearch, innerSearch, search]);
    return {
        gridResults: gridResults,
        loading: loading,
        search: search
    };
}
