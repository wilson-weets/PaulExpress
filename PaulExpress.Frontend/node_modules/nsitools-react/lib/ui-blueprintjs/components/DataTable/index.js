var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import * as React from "react";
import { HTMLTable, Icon, Spinner, Card, Elevation, InputGroup, Colors, ContextMenu, Menu, MenuItem, Dialog, Checkbox, Button, Intent } from "@blueprintjs/core";
import { IconNames } from "@blueprintjs/icons";
import { PagerSelector } from "./PageSelector";
import styled from "styled-components";
import LoadingOverlay from "react-loading-overlay";
import moment from "moment";
import { useTranslation } from "react-i18next";
var Container = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n"], ["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n"])));
var StyledOverlay = styled(LoadingOverlay)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  width: 100%;\n  .MyLoader_overlay {\n    background: transparent;\n  }\n  &.MyLoader_wrapper--active {\n    overflow: hidden;\n  }\n"], ["\n  width: 100%;\n  .MyLoader_overlay {\n    background: transparent;\n  }\n  &.MyLoader_wrapper--active {\n    overflow: hidden;\n  }\n"])));
var StyledHTMLTable = styled(HTMLTable)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  width: 100%;\n"], ["\n  width: 100%;\n"])));
var FilterInput = styled(InputGroup)(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  margin-bottom: 1em;\n  border: none;\n"], ["\n  margin-bottom: 1em;\n  border: none;\n"])));
var ColumnContainer = styled.div(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n"], ["\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n"])));
var Column = styled.div(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: column;\n  align-content: space-between;\n  flex: 1;\n  min-height: 0;\n  min-width: 0;\n  height: auto;\n  margin-left: 1rem;\n  margin-top: 1rem;\n"], ["\n  display: flex;\n  flex-direction: column;\n  align-content: space-between;\n  flex: 1;\n  min-height: 0;\n  min-width: 0;\n  height: auto;\n  margin-left: 1rem;\n  margin-top: 1rem;\n"])));
var ButtonContainer = styled.div(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  justify-content: flex-end;\n"], ["\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  justify-content: flex-end;\n"])));
var RightButtons = styled.div(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n  display: flex;\n  justify-content: flex-start;\n  margin-top: 1em;\n  margin-right: 1em;\n"], ["\n  display: flex;\n  justify-content: flex-start;\n  margin-top: 1em;\n  margin-right: 1em;\n"])));
var isDate = function (date) {
    return (date &&
        Object.prototype.toString.call(date) === "[object Date]" &&
        !isNaN(date));
};
var StyledTR = styled.tr(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), function (props) { return (props.customCss ? props.customCss : ""); });
var StyledTD = styled.td(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), function (props) { return (props.customCss ? props.customCss : ""); });
export function DataTable(_a) {
    var tableState = _a.tableState, loading = _a.loading, _b = _a.columns, customizeColumns = _b === void 0 ? [] : _b, onRowClick = _a.onRowClick, _c = _a.dateFormat, dateFormat = _c === void 0 ? "DD/MM/YYYY hh:mm" : _c, _d = _a.customizeRowStyle, customizeRowStyle = _d === void 0 ? function () { return null; } : _d, htmlTableOptions = _a.htmlTableOptions, displayedColumns = _a.displayedColumns, onDisplayedColumnsChange = _a.onDisplayedColumnsChange;
    var columns = tableState.columns, page = tableState.page, globalFilter = tableState.globalFilter, setGlobalFilter = tableState.setGlobalFilter, enablePagination = tableState.enablePagination, enableFilter = tableState.enableFilter, setColumns = tableState.setColumns;
    var htmlTableFinalOptions = htmlTableOptions || {
        condensed: true,
        bordered: true,
        interactive: onRowClick ? true : false,
        small: true,
        striped: true
    };
    var t = useTranslation().t;
    var _e = __read(React.useState(false), 2), tableColumnChooserPopupOpened = _e[0], setTableColumnChooserPopupOpened = _e[1];
    var _f = __read(React.useState(displayedColumns ? displayedColumns : undefined), 2), tableColumnDisplayed = _f[0], setTableColumnDisplayed = _f[1];
    var columnsWithIds = React.useMemo(function () {
        return customizeColumns.map(function (cus, i) {
            var foundIn = columns.find(function (c) { return c.fieldName === cus.fieldName; });
            if (foundIn) {
                return __assign(__assign({}, foundIn), { id: foundIn.fieldName || i });
            }
            else {
                return {
                    id: i,
                    fieldName: cus.fieldName,
                    sortInfo: "NONE",
                    toggleSort: function () { }
                };
            }
        });
    }, [columns, customizeColumns]);
    React.useEffect(function () {
        var cols = customizeColumns
            .filter(function (c) { return !c.computed; })
            .map(function (c) { return c.fieldName; })
            .filter(function (c) { return c; });
        setColumns(cols);
    }, [customizeColumns, setColumns]);
    var columnOptions = React.useCallback(function (col) {
        var found = customizeColumns.find(function (d) { return d.fieldName === col.fieldName; });
        var defaultRenderHeader = function () {
            if (found && !found.computed)
                return col.fieldName;
            return "";
        };
        var defaultRender = function (item, idx) {
            var value = item[col.fieldName];
            if (isDate(value))
                return moment(value).format(dateFormat);
            else {
                return value || "";
            }
        };
        var defaultCustomizeStyle = function (item, idx) { return null; };
        var displayed = displayedColumns
            ? found.computed ||
                displayedColumns.includes(found.fieldName.toString())
            : true;
        return __assign(__assign({}, col), { displayed: displayed, autoFitContent: found && found.autoFitContent, width: found && found.width, renderHeader: (found && found.header) || defaultRenderHeader, render: (found && found.render) || defaultRender, alignment: (found && found.alignment) || "left", customizeCellStyle: (found && found.customizeCellStyle) || defaultCustomizeStyle });
    }, [customizeColumns, dateFormat, displayedColumns]);
    var onRowClicked = React.useCallback(function (item) {
        if (onRowClick) {
            onRowClick(item);
        }
    }, [onRowClick]);
    var menuContext = React.useMemo(function () {
        return (React.createElement(Menu, null,
            React.createElement(MenuItem, { icon: IconNames.COLUMN_LAYOUT, text: t("ContextMenuChooseColumns"), onClick: function () {
                    setTableColumnChooserPopupOpened(true);
                } })));
    }, [t]);
    var showContextMenu = React.useCallback(function (e) {
        e.preventDefault();
        if (tableColumnDisplayed && menuContext) {
            ContextMenu.show(menuContext, { left: e.clientX, top: e.clientY });
        }
    }, [menuContext, tableColumnDisplayed]);
    var toTitleCase = function (text) {
        return text.substring(0, 1).toUpperCase() + text.substring(1);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(StyledOverlay, { classNamePrefix: "MyLoader_", active: loading, spinner: React.createElement(Card, { elevation: Elevation.FOUR },
                React.createElement(Spinner, { size: 32 }),
                React.createElement("span", { style: { color: Colors.BLACK } }, t("GeneralLoading"))) },
            React.createElement(Container, null,
                enableFilter ? (React.createElement(FilterInput, { leftIcon: IconNames.FILTER, value: globalFilter, placeholder: "Filter...", onChange: function (e) { return setGlobalFilter(e.target.value); } })) : null,
                React.createElement(StyledHTMLTable, __assign({}, htmlTableFinalOptions),
                    React.createElement("thead", { onContextMenu: showContextMenu },
                        React.createElement("tr", null, columnsWithIds
                            .filter(function (c) { return c.fieldName; })
                            .map(function (c) { return columnOptions(c); })
                            .filter(function (c) { return c.displayed; })
                            .map(function (c) { return (React.createElement("th", { key: c.id, onClick: function () { return c.toggleSort(); }, style: {
                                cursor: "pointer",
                                width: c.autoFitContent ? "1%" : c.width + "px",
                                whiteSpace: c.autoFitContent ? "nowrap" : "normal"
                            } },
                            c.renderHeader(),
                            c.sortInfo === "NONE" ? null : c.sortInfo === "DESC" ? (React.createElement(Icon, { icon: IconNames.CHEVRON_DOWN })) : (React.createElement(Icon, { icon: IconNames.CHEVRON_UP })))); }))),
                    React.createElement("tbody", null, page.map(function (d, rowNum) { return (React.createElement(StyledTR, { key: rowNum, customCss: customizeRowStyle(d), style: { cursor: onRowClick ? "pointer" : "default" }, onClick: function () { return onRowClicked(d); } }, columnsWithIds
                        .filter(function (c) { return c.fieldName; })
                        .map(function (c) { return columnOptions(c); })
                        .filter(function (c) { return c.displayed; })
                        .map(function (col) { return (React.createElement(StyledTD, { key: "cell_" + rowNum + "_" + col.id, customCss: col.customizeCellStyle(d, rowNum), style: {
                            textAlign: col.alignment
                        } }, col.render(d, rowNum))); }))); }))),
                enablePagination && React.createElement(PagerSelector, { tableState: tableState }))),
        tableColumnDisplayed && (React.createElement(Dialog, { isOpen: tableColumnChooserPopupOpened, onClose: function () { return setTableColumnChooserPopupOpened(false); }, canOutsideClickClose: false, canEscapeKeyClose: true, title: "Edit columns displayed", style: { width: "15%" }, isCloseButtonShown: true },
            React.createElement(Container, null,
                React.createElement(ColumnContainer, null,
                    React.createElement(Column, null, columns
                        .map(function (c) { return c.fieldName.toString(); })
                        .map(function (cf) {
                        return (React.createElement(Checkbox, { key: "_" + cf.toString(), name: cf.toString(), label: toTitleCase(cf.toString()), checked: tableColumnDisplayed.includes(cf.toString()), onChange: function (e) {
                                var checked = e.currentTarget.checked;
                                var column = cf.toString();
                                console.log("incheck event", {
                                    checked: checked,
                                    column: column
                                });
                                if (checked) {
                                    var nextColumns = tableColumnDisplayed.concat([
                                        column
                                    ]);
                                    setTableColumnDisplayed(nextColumns);
                                }
                                else {
                                    var nextColumns = tableColumnDisplayed.filter(function (c) { return c !== column; });
                                    setTableColumnDisplayed(__spread(nextColumns));
                                }
                            } }));
                    }))),
                React.createElement(ButtonContainer, null,
                    React.createElement(RightButtons, null,
                        React.createElement(Button, { icon: IconNames.FLOPPY_DISK, text: t("GeneralSave"), intent: Intent.PRIMARY, disabled: tableColumnDisplayed.length === 0, type: "submit", onClick: function () {
                                onDisplayedColumnsChange(__spread(tableColumnDisplayed));
                                setTableColumnChooserPopupOpened(false);
                            } }))))))));
}
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10;
