var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import * as React from "react";
import { useState } from "react";
import styled from "styled-components";
import { Collapse, Intent, Button, Divider } from "@blueprintjs/core";
import { IconNames } from "@blueprintjs/icons";
var Container = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([""], [""])));
var TitleBar = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  font-size: 14pt;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  min-height: 35px;\n"], ["\n  font-size: 14pt;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  min-height: 35px;\n"])));
export var CollapsePanel = function (_a) {
    var title = _a.title, _b = _a.collapsed, defaultCollapsed = _b === void 0 ? false : _b, children = _a.children, _c = _a.disabled, disabled = _c === void 0 ? false : _c, rightElement = _a.rightElement, _d = _a.buttons, buttons = _d === void 0 ? [] : _d;
    var _e = __read(useState(defaultCollapsed), 2), collapsed = _e[0], setCollapse = _e[1];
    var toggleCollapse = React.useCallback(function () {
        if (!disabled) {
            setCollapse(function (s) { return !s; });
        }
    }, [disabled]);
    return (React.createElement(Container, null,
        React.createElement(TitleBar, { onClick: toggleCollapse, style: { cursor: disabled ? "auto" : "pointer" } },
            title,
            React.createElement("div", null,
                buttons.map(function (b, i) { return (React.createElement(Button, __assign({ key: i, intent: Intent.PRIMARY }, b, { minimal: true, onClick: function (e) {
                        e.stopPropagation();
                        b.onClick(e);
                    } }))); }),
                rightElement,
                !disabled && (React.createElement(Button, { minimal: true, icon: collapsed ? IconNames.CHEVRON_UP : IconNames.CHEVRON_DOWN })))),
        React.createElement(Divider, { style: { marginBottom: "1rem" } }),
        React.createElement(Collapse, { isOpen: !collapsed, keepChildrenMounted: true }, children)));
};
var templateObject_1, templateObject_2;
