var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Button, Menu, MenuItem, Position } from "@blueprintjs/core";
import { IconNames } from "@blueprintjs/icons";
import { renderFilteredItems, Suggest } from "@blueprintjs/select";
import * as React from "react";
import { List } from "react-virtualized";
export function SelectBox(_a) {
    var items = _a.items, displayField = _a.displayField, valueField = _a.valueField, value = _a.value, onValueChange = _a.onValueChange, name = _a.name;
    var CustomSuggest = Suggest.ofType();
    var itemSelected = items.find(function (i) { return i[valueField] === value; });
    var itemPredicate = React.useCallback(function (query, item) {
        var valueDisplayed = item[displayField];
        return (("" + valueDisplayed).toLowerCase().indexOf(query.toLowerCase()) >= 0);
    }, [displayField]);
    var itemRenderer = React.useCallback(function (item, _a) {
        var handleClick = _a.handleClick, modifiers = _a.modifiers;
        if (!modifiers.matchesPredicate) {
            return null;
        }
        return (React.createElement(MenuItem, { active: modifiers.active, key: item[valueField], text: item[displayField], onClick: handleClick }));
    }, [displayField, valueField]);
    var inputValueRenderer = React.useCallback(function (item) { return "" + item[displayField]; }, [displayField]);
    var noResultsComponent = React.useMemo(function () { return React.createElement("div", null, " No results..."); }, []);
    var renderVirtualizedList = React.useCallback(function (items, active) {
        var props = {
            width: 400,
            height: 200,
            rowCount: items.length,
            rowHeight: 45,
            rowRenderer: function (props) {
                return (React.createElement("div", { key: props.key, style: props.style }, items[props.index]));
            }
        };
        if (active) {
            props.scrollToIndex = active;
        }
        return React.createElement(List, __assign({}, props));
    }, []);
    var renderMenu = React.useCallback(function (props) {
        var items = props.items, itemsParentRef = props.itemsParentRef, query = props.query, renderItem = props.renderItem, activeItem = props.activeItem, filteredItems = props.filteredItems;
        var active = null;
        if (activeItem) {
            active = filteredItems.findIndex(function (item) { return item[valueField] === activeItem[valueField]; });
        }
        var renderedItems = renderFilteredItems(props);
        return (React.createElement(Menu, { ulRef: itemsParentRef, style: { padding: 0 } }, Array.isArray(renderedItems) ? (React.createElement(React.Fragment, null,
            React.createElement(MenuItem, { disabled: true, text: "Found " + renderedItems.length + " items matching \"" + query + "\"" }),
            React.createElement(List, { width: 200, height: 300, rowHeight: 32, rowCount: renderedItems.length, rowRenderer: function (props) { return (React.createElement("div", { key: props.key, style: props.style }, renderedItems[props.index])); }, style: { maxHeight: "300px", height: "auto" } }))) : renderedItems ? (renderedItems) : (React.createElement(MenuItem, { disabled: true, text: "No results." })))
        //   <Menu ulRef={itemsParentRef}>
        //     {Array.isArray(renderedItems) ? renderVirtualizedList(renderedItems, active) : renderedItems}
        //   </Menu>
        );
    }, [valueField]);
    var input = React.useRef();
    return (React.createElement(CustomSuggest, { onItemSelect: function (i) { return onValueChange(i); }, items: items, itemPredicate: itemPredicate, itemRenderer: itemRenderer, itemListRenderer: renderMenu, inputValueRenderer: inputValueRenderer, selectedItem: value, resetOnSelect: false, popoverProps: {
            minimal: true,
            canEscapeKeyClose: true,
            autoFocus: true,
            position: Position.TOP,
            usePortal: false
        }, inputProps: {
            inputRef: function (reg) { return (input.current = reg); },
            onClick: function () { return input.current.focus(); },
            style: {
                cursor: "pointer"
                // boxShadow: "inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)",
                // verticalAlign: "center"
            },
            rightElement: (React.createElement(Button, { minimal: true, icon: IconNames.CARET_DOWN, onClick: function () { return input.current.focus(); } }))
        }, noResults: React.createElement(MenuItem, { disabled: true, text: "No results." }) },
        React.createElement(Button, { text: itemSelected ? itemSelected[displayField] : "Select a value...", rightIcon: "double-caret-vertical" })));
}
