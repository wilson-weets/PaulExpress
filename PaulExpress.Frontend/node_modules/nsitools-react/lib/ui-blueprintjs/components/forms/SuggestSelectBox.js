var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Button, Menu, MenuItem } from "@blueprintjs/core";
import { IconNames } from "@blueprintjs/icons";
import { renderFilteredItems, Suggest } from "@blueprintjs/select";
import { getIn, setIn } from "formik";
import * as React from "react";
import { List } from "react-virtualized";
import { BaseFormGroup } from ".";
export var SuggestSelectBox = function (_a) {
    var items = _a.items, placeHolder = _a.placeHolder, fill = _a.fill, disabled = _a.disabled, customOnChange = _a.customOnChange, _b = _a.convertValue, convertValue = _b === void 0 ? function (v) { return v; } : _b, formGroupProps = __rest(_a, ["items", "placeHolder", "fill", "disabled", "customOnChange", "convertValue"]);
    var ItemSuggest = Suggest.ofType();
    var escapeRegExpChars = React.useCallback(function (text) {
        return text.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
    }, []);
    var highlightText = React.useCallback(function (text, query) {
        var lastIndex = 0;
        var words = query
            .split(/\s+/)
            .filter(function (word) { return word.length > 0; })
            .map(escapeRegExpChars);
        if (words.length === 0) {
            return [text];
        }
        var regexp = new RegExp(words.join("|"), "gi");
        var tokens = [];
        while (true) {
            var match = regexp.exec(text);
            if (!match) {
                break;
            }
            var length_1 = match[0].length;
            var before = text.slice(lastIndex, regexp.lastIndex - length_1);
            if (before.length > 0) {
                tokens.push(before);
            }
            lastIndex = regexp.lastIndex;
            tokens.push(React.createElement("strong", { key: lastIndex }, match[0]));
        }
        var rest = text.slice(lastIndex);
        if (rest.length > 0) {
            tokens.push(rest);
        }
        return tokens;
    }, [escapeRegExpChars]);
    var searchRenderer = React.useCallback(function (obj, _a) {
        var handleClick = _a.handleClick, modifiers = _a.modifiers, query = _a.query;
        if (!modifiers.matchesPredicate) {
            return null;
        }
        return (React.createElement(MenuItem, { active: modifiers.active, disabled: modifiers.disabled, onClick: handleClick, text: highlightText(obj.label, query) }));
    }, [highlightText]);
    var searchPredicate = React.useCallback(function (query, itm, _index, exactMatch) {
        var normalizedItem = itm.label.toLowerCase();
        var normalizedQuery = query.toLowerCase();
        if (exactMatch) {
            return normalizedItem === normalizedQuery;
        }
        else {
            return ("" + normalizedItem).indexOf(normalizedQuery) >= 0;
        }
    }, []);
    var searchListRenderer = React.useCallback(function (props) {
        var itemsParentRef = props.itemsParentRef, activeItem = props.activeItem, filteredItems = props.filteredItems;
        var renderedItems = renderFilteredItems(props);
        var rowIndex = filteredItems.indexOf(activeItem);
        return (React.createElement(Menu, { ulRef: itemsParentRef, style: { padding: 0 } }, Array.isArray(renderedItems) ? (React.createElement(List, { width: 250, height: 300, rowHeight: 32, rowCount: renderedItems.length, rowRenderer: function (rowProps) { return (React.createElement("div", { key: rowProps.key, style: rowProps.style }, renderedItems[rowProps.index])); }, style: { maxHeight: "300px", height: "auto" }, scrollToIndex: rowIndex })) : renderedItems ? (renderedItems) : (React.createElement(MenuItem, { icon: IconNames.CROSS, text: "No results...", disabled: true }))));
    }, []);
    var input = React.useRef();
    var getInputProps = React.useCallback(function (formikProps, name, intent) {
        return {
            autoComplete: "nope",
            name: name,
            intent: intent,
            fill: fill,
            placeholder: placeHolder,
            value: convertValue(items.find(function (i) { return i.value === getIn(formikProps.values, name, ""); })
                ? items.find(function (i) { return i.value === getIn(formikProps.values, name, ""); })
                    .label
                : getIn(formikProps.values, name, "")),
            disabled: disabled,
            rightElement: (React.createElement(Button, { minimal: true, icon: IconNames.CARET_DOWN, onClick: function () { return input.current.focus(); } })),
            inputRef: function (reg) { return (input.current = reg); },
            onClick: function () { return input.current.focus(); },
            style: {
                cursor: "pointer"
            },
            onBlur: function (event) {
                if (items.map(function (c) { return c.label; }).includes(event.target.value)) {
                    var nextValues = setIn(formikProps.values, name, items.find(function (i) { return i.label === event.target.value; }).value);
                    formikProps.setValues(nextValues);
                }
            }
        };
    }, [convertValue, disabled, fill, items, placeHolder]);
    return (React.createElement(BaseFormGroup, __assign({}, formGroupProps), function (_a) {
        var intent = _a.intent, formikProps = _a.formikProps, name = _a.name;
        return (React.createElement(ItemSuggest, { inputValueRenderer: function (i) { return i.label; }, items: items, itemRenderer: searchRenderer, itemPredicate: searchPredicate, itemListRenderer: searchListRenderer, resetOnQuery: false, onItemSelect: function (c, e) {
                if (customOnChange) {
                    customOnChange(c, e);
                }
                else {
                    var nextValues = setIn(formikProps.values, name, c.value);
                    formikProps.setValues(nextValues);
                }
            }, selectedItem: items.find(function (i) { return i.value === getIn(formikProps.values, name, ""); }), popoverProps: { minimal: true }, fill: fill, inputProps: getInputProps(formikProps, name, intent) }));
    }));
};
