var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from "react";
import { BaseFormGroup } from "./BaseFormGroup";
import { DateInput, TimePrecision } from "@blueprintjs/datetime";
import { getIn } from "formik";
import moment from "moment";
export var DateInputField = function (props) {
    var placeHolder = props.placeHolder, fill = props.fill, formGroupProps = __rest(props, ["placeHolder", "fill"]);
    return (React.createElement(BaseFormGroup, __assign({}, formGroupProps), function (_a) {
        var intent = _a.intent, formikProps = _a.formikProps, name = _a.name;
        return (React.createElement(DateInput, { formatDate: function (date) {
                return props.formatDate
                    ? moment(date).format(props.formatDate)
                    : date.toLocaleString();
            }, minDate: moment()
                .subtract(100, "year")
                .toDate(), maxDate: moment()
                .add(100, "year")
                .toDate(), onChange: function (date) { return formikProps.setFieldValue(name, date); }, parseDate: function (str) { return new Date(str); }, value: getIn(formikProps.values, name, ""), timePickerProps: props.timePicker ? { precision: TimePrecision.MINUTE } : undefined, inputProps: {
                name: name,
                onBlur: formikProps.handleBlur,
                intent: intent
            } }));
    }));
};
export default DateInputField;
