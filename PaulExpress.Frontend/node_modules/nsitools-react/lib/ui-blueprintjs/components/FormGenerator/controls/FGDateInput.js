var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import * as React from "react";
import { DateInput } from "@blueprintjs/datetime";
import { getIn } from "formik";
import moment from "moment";
import { Button } from "@blueprintjs/core";
import "@blueprintjs/datetime/lib/css/blueprint-datetime.css";
export var FGDateInput = function (_a) {
    var formatDate = _a.formatDate, field = _a.field, formik = _a.formik, fill = _a.fill, intent = _a.intent;
    var format = field.formatDate || formatDate;
    var _b = __read(React.useState(null), 2), RefInput = _b[0], setRefInput = _b[1];
    return (React.createElement(DateInput, { formatDate: function (date) {
            return format ? moment(date).format(format) : date.toLocaleString();
        }, onChange: function (date) { return formik.setFieldValue(field.name, date); }, parseDate: function (str) { return new Date(str); }, value: getIn(formik.values, field.name, ""), popoverProps: {
            fill: fill
        }, inputProps: {
            inputRef: function (r) {
                setRefInput(r);
            },
            name: field.name,
            onBlur: formik.handleBlur,
            intent: intent,
            rightElement: (React.createElement(Button, { minimal: true, icon: "calendar", onClick: function () { return RefInput.focus(); } }))
        } }));
};
