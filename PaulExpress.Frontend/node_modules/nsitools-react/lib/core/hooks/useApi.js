var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { useState, useEffect, useCallback } from "react";
var useApi = function (apiFn) {
    var _a = __read(useState({
        data: null,
        loading: !!apiFn,
        error: null
    }), 2), state = _a[0], setState = _a[1];
    function trigger(apiFnOverride) {
        var fn = apiFnOverride || apiFn;
        if (!fn) {
            return;
        }
        setState(function (s) { return ({ data: s.data, loading: true, error: null }); });
        var rt = fn();
        if (rt instanceof Promise) {
            rt.then(function (data) {
                setState({ data: data, loading: false, error: null });
            }).catch(function (error) {
                console.error(error);
                setState(function (s) { return ({
                    data: s.data,
                    loading: false,
                    error: "" + error
                }); });
            });
        }
        else {
            setState({ data: rt, loading: false, error: null });
        }
    }
    var setData = useCallback(function (nextData) { return setState(function (s) { return (__assign(__assign({}, s), { data: nextData })); }); }, [setState]);
    return [state.data, state.loading, state.error, trigger, setData];
};
export var useApiEffect = function (apiFn, dependencies) {
    if (dependencies === void 0) { dependencies = []; }
    var _a = __read(useApi(apiFn), 5), data = _a[0], loading = _a[1], error = _a[2], trigger = _a[3], setData = _a[4];
    useEffect(trigger, dependencies);
    return [data, loading, error, trigger, setData];
};
