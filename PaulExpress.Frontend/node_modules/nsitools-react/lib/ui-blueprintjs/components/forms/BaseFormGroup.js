var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import * as React from "react";
import { getIn } from "formik";
import { Intent, FormGroup } from "@blueprintjs/core";
export var BaseFormGroup = function (props) {
    var _a = props.inline, inline = _a === void 0 ? false : _a, _b = props.helperText, helperText = _b === void 0 ? "" : _b, formikProps = props.formikProps, name = props.name, label = props.label, labelInfo = props.labelInfo, errorText = props.errorText, style = props.style, requiredMark = props.requiredMark, showColon = props.showColon;
    var _c = __read(React.useState(Intent.NONE), 2), finalIntent = _c[0], setFinalIntent = _c[1];
    var _d = __read(React.useState(helperText), 2), finalHelperText = _d[0], setFinalHelperText = _d[1];
    var finalLabel = React.useMemo(function () {
        return label
            ? "" + label + (requiredMark ? " *" : "") + (showColon ? " :" : "")
            : undefined;
    }, [label, requiredMark, showColon]);
    React.useEffect(function () {
        if (formikProps && formikProps.errors && getIn(formikProps.touched, name)) {
            var error = getIn(formikProps.errors, name);
            if (error) {
                setFinalIntent(Intent.DANGER);
                setFinalHelperText(errorText ? errorText : error.toString());
            }
            else {
                setFinalIntent(Intent.NONE);
                setFinalHelperText(helperText);
            }
        }
    }, [errorText, helperText, name, formikProps]);
    return (React.createElement(FormGroup, { style: style, inline: inline, intent: finalIntent, label: finalLabel, helperText: finalHelperText, labelInfo: labelInfo }, props.children({ intent: finalIntent, formikProps: formikProps, name: name })));
};
