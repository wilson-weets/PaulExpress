import { IUseGridStateOptions } from "./interfaces/IUseGridStateOptions";
import { SortType } from "./types/SortType";
interface IColumnInfo<T> {
    fieldName: keyof T;
    sortInfo: SortType;
    toggleSort: () => void;
}
interface ISetDataOptions {
    totalCount: number;
}
export declare const useGridState: <T extends {
    [key: string]: any;
}>(options?: Partial<IUseGridStateOptions<T>>) => {
    data: T[];
    page: T[];
    pageNumber: number;
    pageSize: number;
    availablePageSizes: number[];
    nbPages: number;
    totalCount: number;
    sortKeys: {
        [key: string]: SortType;
    };
    sortKeysStrings: string[];
    columns: IColumnInfo<T>[];
    canGoNextPage: boolean;
    canGoPreviousPage: boolean;
    goToNextPage: () => void;
    goToPreviousPage: () => void;
    setPageSize: (size: number) => void;
    setGlobalFilter: (filter: string) => void;
    setColumns: (c: (keyof T)[]) => void;
    goToPage: (pgIndex: number) => void;
    setData: (nextData: T[], dataOptions?: ISetDataOptions) => void;
    toggleSort: (fieldName: string, sortOrder?: SortType) => void;
    take: number;
    skip: number;
    pageNumbers: number[];
    globalFilter: string;
    enableFilter: boolean;
    enablePagination: boolean;
};
export {};
