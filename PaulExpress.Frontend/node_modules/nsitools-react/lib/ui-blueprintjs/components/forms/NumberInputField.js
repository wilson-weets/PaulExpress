var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Button, Intent, NumericInput } from "@blueprintjs/core";
import { IconNames } from "@blueprintjs/icons";
import { getIn } from "formik";
import * as React from "react";
import { BaseFormGroup } from "./BaseFormGroup";
export var NumberInputField = function (props) {
    var showEraser = props.showEraser, placeHolder = props.placeHolder, fill = props.fill, disabled = props.disabled, rightElement = props.rightElement, _a = props.autoComplete, autoComplete = _a === void 0 ? false : _a, _b = props.stepSize, stepSize = _b === void 0 ? 1 : _b, _c = props.minorStepSize, minorStepSize = _c === void 0 ? 0.1 : _c, _d = props.majorStepSize, majorStepSize = _d === void 0 ? 10 : _d, min = props.min, max = props.max, leftIcon = props.leftIcon, _e = props.buttonPosition, buttonPosition = _e === void 0 ? "none" : _e, formGroupProps = __rest(props, ["showEraser", "placeHolder", "fill", "disabled", "rightElement", "autoComplete", "stepSize", "minorStepSize", "majorStepSize", "min", "max", "leftIcon", "buttonPosition"]);
    return (React.createElement(BaseFormGroup, __assign({}, formGroupProps), function (_a) {
        var intent = _a.intent, formikProps = _a.formikProps, name = _a.name;
        return (React.createElement(NumericInput, { name: name, intent: intent, fill: fill, placeholder: placeHolder, clampValueOnBlur: true, value: getIn(formikProps.values, name, ""), onValueChange: function (valueAsNumber, valueAsString) {
                formikProps.setFieldValue(name, valueAsNumber);
            }, leftIcon: leftIcon, onBlur: formikProps.handleBlur, disabled: disabled, autoComplete: autoComplete ? "" : "nope", stepSize: stepSize, minorStepSize: minorStepSize, majorStepSize: majorStepSize, min: min, max: max, rightElement: rightElement ? (rightElement) : showEraser ? (React.createElement(Button, { icon: IconNames.ERASER, minimal: true, intent: Intent.DANGER, onClick: function () { return formikProps.setFieldValue(name, ""); } })) : (undefined), buttonPosition: buttonPosition }));
    }));
};
