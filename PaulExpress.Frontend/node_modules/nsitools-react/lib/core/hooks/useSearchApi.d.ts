import { useGridState } from "./gridState";
declare type baseReturnType = {
    results?: Array<any>;
    totalCount?: number;
};
declare type baseSearchObject = {
    sortKey?: string[];
    filter?: string;
    forceSkip?: number;
    forceTake?: number;
};
interface IUseSearchApiOptions<TResults, TSearch> {
    tableState: ReturnType<typeof useGridState>;
    searchFunction: (sObj: TSearch) => TResults | Promise<TResults>;
    overrideTableStateSearch?: (sObj: TSearch) => TSearch;
    initialSearch?: boolean;
}
export declare function useSearchApi<TSearch extends baseSearchObject, TResults extends baseReturnType>({ tableState, searchFunction, overrideTableStateSearch, initialSearch }: IUseSearchApiOptions<TResults, TSearch>): {
    gridResults: TResults;
    loading: boolean;
    search: (nextSearch?: TSearch) => void;
};
export {};
