var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from "react";
import { TextArea } from "@blueprintjs/core";
import { BaseFormGroup } from "./BaseFormGroup";
import { getIn } from "formik";
export var TextAreaInputField = function (props) {
    var placeHolder = props.placeHolder, fill = props.fill, disabled = props.disabled, growVertically = props.growVertically, formGroupProps = __rest(props, ["placeHolder", "fill", "disabled", "growVertically"]);
    return (React.createElement(BaseFormGroup, __assign({}, formGroupProps), function (_a) {
        var intent = _a.intent, formikProps = _a.formikProps, name = _a.name;
        return (React.createElement(TextArea, { name: name, intent: intent, fill: fill, placeholder: placeHolder, value: getIn(formikProps.values, name, ""), onChange: formikProps.handleChange, onBlur: formikProps.handleBlur, disabled: disabled, growVertically: growVertically, style: { resize: "none", maxHeight: "200px" } }));
    }));
};
